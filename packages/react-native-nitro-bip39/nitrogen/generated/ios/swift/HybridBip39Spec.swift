///
/// HybridBip39Spec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * A Swift protocol representing the Bip39 HybridObject.
 * Implement this protocol to create Swift-based instances of Bip39.
 *
 * When implementing this protocol, make sure to initialize `hybridContext` - example:
 * ```
 * public class HybridBip39 : HybridBip39Spec {
 *   // Initialize HybridContext
 *   var hybridContext = margelo.nitro.HybridContext()
 *
 *   // Return size of the instance to inform JS GC about memory pressure
 *   var memorySize: Int {
 *     return getSizeOf(self)
 *   }
 *
 *   // ...
 * }
 * ```
 */
public protocol HybridBip39Spec: AnyObject, HybridObjectSpec {
  // Properties
  

  // Methods
  func getDefaultWordlist() throws -> WordLists
  func setDefaultWordlist(value: WordLists) throws -> Void
  func generateMnemonic(wordCount: Double?, rng: ArrayBufferHolder?, wordlist: WordLists?) throws -> String
  func validateMnemonic(mnemonic: String, wordlist: WordLists?) throws -> Bool
  func mnemonicToSeed(mnemonic: String, password: String?) throws -> ArrayBufferHolder
  func mnemonicToSeedHex(mnemonic: String, password: String?) throws -> String
  func mnemonicToEntropy(mnemonic: String, wordlist: WordLists?) throws -> String
  func entropyToMnemonic(entropy: ArrayBufferHolder, wordlist: WordLists?) throws -> String
}

public extension HybridBip39Spec {
  /**
   * Create a new instance of HybridBip39SpecCxx for the given HybridBip39Spec.
   *
   * Instances of HybridBip39SpecCxx can be accessed from C++, and contain
   * additional required bridging code for C++ <> Swift interop.
   */
  func createCxxBridge() -> HybridBip39SpecCxx {
    return HybridBip39SpecCxx(self)
  }
}
