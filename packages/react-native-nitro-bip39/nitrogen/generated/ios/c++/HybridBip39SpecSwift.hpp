///
/// HybridBip39SpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridBip39Spec.hpp"

// Forward declaration of `HybridBip39SpecCxx` to properly resolve imports.
namespace Bip39 { class HybridBip39SpecCxx; }

// Forward declaration of `WordLists` to properly resolve imports.
namespace margelo::nitro::bip39 { enum class WordLists; }
// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }
// Forward declaration of `ArrayBufferHolder` to properly resolve imports.
namespace NitroModules { class ArrayBufferHolder; }

#include "WordLists.hpp"
#include <string>
#include <optional>
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/ArrayBufferHolder.hpp>

#if __has_include(<NitroModules/HybridContext.hpp>)
#include <NitroModules/HybridContext.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

#include "Bip39-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::bip39 {

  /**
   * The C++ part of HybridBip39SpecCxx.swift.
   *
   * HybridBip39SpecSwift (C++) accesses HybridBip39SpecCxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridBip39SpecCxx can directly inherit from the C++ class HybridBip39Spec
   * to simplify the whole structure and memory management.
   */
  class HybridBip39SpecSwift: public virtual HybridBip39Spec {
  public:
    // Constructor from a Swift instance
    explicit HybridBip39SpecSwift(const Bip39::HybridBip39SpecCxx& swiftPart):
      HybridObject(HybridBip39Spec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline Bip39::HybridBip39SpecCxx getSwiftPart() noexcept { return _swiftPart; }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline WordLists getDefaultWordlist() override {
      auto __result = _swiftPart.getDefaultWordlist();
      return static_cast<WordLists>(__result);
    }
    inline void setDefaultWordlist(WordLists value) override {
      _swiftPart.setDefaultWordlist(static_cast<int>(value));
    }
    inline std::string generateMnemonic(std::optional<double> wordCount, const std::optional<std::shared_ptr<ArrayBuffer>>& rng, std::optional<WordLists> wordlist) override {
      auto __result = _swiftPart.generateMnemonic(wordCount, rng, wordlist);
      return __result;
    }
    inline bool validateMnemonic(const std::string& mnemonic, std::optional<WordLists> wordlist) override {
      auto __result = _swiftPart.validateMnemonic(mnemonic, wordlist);
      return __result;
    }
    inline std::shared_ptr<ArrayBuffer> mnemonicToSeed(const std::string& mnemonic, const std::optional<std::string>& password) override {
      auto __result = _swiftPart.mnemonicToSeed(mnemonic, password);
      return __result.getArrayBuffer();
    }
    inline std::string mnemonicToSeedHex(const std::string& mnemonic, const std::optional<std::string>& password) override {
      auto __result = _swiftPart.mnemonicToSeedHex(mnemonic, password);
      return __result;
    }
    inline std::string mnemonicToEntropy(const std::string& mnemonic, std::optional<WordLists> wordlist) override {
      auto __result = _swiftPart.mnemonicToEntropy(mnemonic, wordlist);
      return __result;
    }
    inline std::string entropyToMnemonic(const std::shared_ptr<ArrayBuffer>& entropy, std::optional<WordLists> wordlist) override {
      auto __result = _swiftPart.entropyToMnemonic(ArrayBufferHolder(entropy), wordlist);
      return __result;
    }

  private:
    Bip39::HybridBip39SpecCxx _swiftPart;
  };

} // namespace margelo::nitro::bip39
