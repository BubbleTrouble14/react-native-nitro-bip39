///
/// HybridBip39Spec.kt
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

package com.margelo.nitro.bip39

import android.util.Log
import androidx.annotation.Keep
import com.facebook.jni.HybridData
import com.facebook.proguard.annotations.DoNotStrip
import com.margelo.nitro.core.*

/**
 * A Kotlin class representing the Bip39 HybridObject.
 * Implement this abstract class to create Kotlin-based instances of Bip39.
 */
@DoNotStrip
@Keep
@Suppress("RedundantSuppression", "KotlinJniMissingFunction", "PropertyName", "RedundantUnitReturnType", "unused")
abstract class HybridBip39Spec: HybridObject() {
  @DoNotStrip
  private var mHybridData: HybridData = initHybrid()

  init {
    // Pass this `HybridData` through to it's base class,
    // to represent inheritance to JHybridObject on C++ side
    super.updateNative(mHybridData)
  }

  /**
   * Call from a child class to initialize HybridData with a child.
   */
  override fun updateNative(hybridData: HybridData) {
    mHybridData = hybridData
  }

  // Properties
  

  // Methods
  @DoNotStrip
  @Keep
  abstract fun getDefaultWordlist(): WordLists
  
  @DoNotStrip
  @Keep
  abstract fun setDefaultWordlist(value: WordLists): Unit
  
  @DoNotStrip
  @Keep
  abstract fun generateMnemonic(wordCount: Double?, rng: ArrayBuffer?, wordlist: WordLists?): String
  
  @DoNotStrip
  @Keep
  abstract fun validateMnemonic(mnemonic: String, wordlist: WordLists?): Boolean
  
  @DoNotStrip
  @Keep
  abstract fun mnemonicToSeed(mnemonic: String, password: String?): ArrayBuffer
  
  @DoNotStrip
  @Keep
  abstract fun mnemonicToSeedHex(mnemonic: String, password: String?): String
  
  @DoNotStrip
  @Keep
  abstract fun mnemonicToEntropy(mnemonic: String, wordlist: WordLists?): String
  
  @DoNotStrip
  @Keep
  abstract fun entropyToMnemonic(entropy: ArrayBuffer, wordlist: WordLists?): String

  private external fun initHybrid(): HybridData

  companion object {
    private const val TAG = "HybridBip39Spec"
    init {
      try {
        Log.i(TAG, "Loading Bip39 C++ library...")
        System.loadLibrary("Bip39")
        Log.i(TAG, "Successfully loaded Bip39 C++ library!")
      } catch (e: Error) {
        Log.e(TAG, "Failed to load Bip39 C++ library! Is it properly installed and linked? " +
                    "Is the name correct? (see `CMakeLists.txt`, at `add_library(...)`)", e)
        throw e
      }
    }
  }
}
