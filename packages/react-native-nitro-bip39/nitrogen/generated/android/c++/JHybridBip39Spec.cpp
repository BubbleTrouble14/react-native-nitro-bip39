///
/// JHybridBip39Spec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#include "JHybridBip39Spec.hpp"

// Forward declaration of `WordLists` to properly resolve imports.
namespace margelo::nitro::bip39 { enum class WordLists; }
// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }

#include "WordLists.hpp"
#include "JWordLists.hpp"
#include <string>
#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/JArrayBuffer.hpp>
#include <optional>

namespace margelo::nitro::bip39 {

  jni::local_ref<JHybridBip39Spec::jhybriddata> JHybridBip39Spec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridBip39Spec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridBip39Spec::initHybrid),
    });
  }

  size_t JHybridBip39Spec::getExternalMemorySize() noexcept {
    static const auto method = _javaPart->getClass()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  WordLists JHybridBip39Spec::getDefaultWordlist() {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JWordLists>()>("getDefaultWordlist");
    auto result = method(_javaPart);
    return result->toCpp();
  }
  void JHybridBip39Spec::setDefaultWordlist(WordLists value) {
    static const auto method = _javaPart->getClass()->getMethod<void(jni::alias_ref<JWordLists> /* value */)>("setDefaultWordlist");
    method(_javaPart, JWordLists::fromCpp(value));
  }
  std::string JHybridBip39Spec::generateMnemonic(std::optional<double> wordCount, const std::optional<std::shared_ptr<ArrayBuffer>>& rng, std::optional<WordLists> wordlist) {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<jni::JString>(jni::alias_ref<jni::JDouble> /* wordCount */, jni::alias_ref<JArrayBuffer::javaobject> /* rng */, jni::alias_ref<JWordLists> /* wordlist */)>("generateMnemonic");
    auto result = method(_javaPart, wordCount.has_value() ? jni::JDouble::valueOf(wordCount.value()) : nullptr, rng.has_value() ? JArrayBuffer::wrap(rng.value()) : nullptr, wordlist.has_value() ? JWordLists::fromCpp(wordlist.value()) : nullptr);
    return result->toStdString();
  }
  bool JHybridBip39Spec::validateMnemonic(const std::string& mnemonic, std::optional<WordLists> wordlist) {
    static const auto method = _javaPart->getClass()->getMethod<jboolean(jni::alias_ref<jni::JString> /* mnemonic */, jni::alias_ref<JWordLists> /* wordlist */)>("validateMnemonic");
    auto result = method(_javaPart, jni::make_jstring(mnemonic), wordlist.has_value() ? JWordLists::fromCpp(wordlist.value()) : nullptr);
    return result;
  }
  std::shared_ptr<ArrayBuffer> JHybridBip39Spec::mnemonicToSeed(const std::string& mnemonic, const std::optional<std::string>& password) {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<JArrayBuffer::javaobject>(jni::alias_ref<jni::JString> /* mnemonic */, jni::alias_ref<jni::JString> /* password */)>("mnemonicToSeed");
    auto result = method(_javaPart, jni::make_jstring(mnemonic), password.has_value() ? jni::make_jstring(password.value()) : nullptr);
    return result->cthis()->getArrayBuffer();
  }
  std::string JHybridBip39Spec::mnemonicToSeedHex(const std::string& mnemonic, const std::optional<std::string>& password) {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<jni::JString>(jni::alias_ref<jni::JString> /* mnemonic */, jni::alias_ref<jni::JString> /* password */)>("mnemonicToSeedHex");
    auto result = method(_javaPart, jni::make_jstring(mnemonic), password.has_value() ? jni::make_jstring(password.value()) : nullptr);
    return result->toStdString();
  }
  std::string JHybridBip39Spec::mnemonicToEntropy(const std::string& mnemonic, std::optional<WordLists> wordlist) {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<jni::JString>(jni::alias_ref<jni::JString> /* mnemonic */, jni::alias_ref<JWordLists> /* wordlist */)>("mnemonicToEntropy");
    auto result = method(_javaPart, jni::make_jstring(mnemonic), wordlist.has_value() ? JWordLists::fromCpp(wordlist.value()) : nullptr);
    return result->toStdString();
  }
  std::string JHybridBip39Spec::entropyToMnemonic(const std::shared_ptr<ArrayBuffer>& entropy, std::optional<WordLists> wordlist) {
    static const auto method = _javaPart->getClass()->getMethod<jni::local_ref<jni::JString>(jni::alias_ref<JArrayBuffer::javaobject> /* entropy */, jni::alias_ref<JWordLists> /* wordlist */)>("entropyToMnemonic");
    auto result = method(_javaPart, JArrayBuffer::wrap(entropy), wordlist.has_value() ? JWordLists::fromCpp(wordlist.value()) : nullptr);
    return result->toStdString();
  }

} // namespace margelo::nitro::bip39
