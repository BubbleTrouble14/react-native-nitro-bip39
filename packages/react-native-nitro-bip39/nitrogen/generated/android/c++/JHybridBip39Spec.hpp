///
/// HybridBip39Spec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#include <NitroModules/JHybridObject.hpp>
#include <fbjni/fbjni.h>
#include "HybridBip39Spec.hpp"




namespace margelo::nitro::bip39 {

  using namespace facebook;

  class JHybridBip39Spec: public jni::HybridClass<JHybridBip39Spec, JHybridObject>,
                          public virtual HybridBip39Spec {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/bip39/HybridBip39Spec;";
    static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jhybridobject> jThis);
    static void registerNatives();

  protected:
    // C++ constructor (called from Java via `initHybrid()`)
    explicit JHybridBip39Spec(jni::alias_ref<jhybridobject> jThis) :
      HybridObject(HybridBip39Spec::TAG),
      _javaPart(jni::make_global(jThis)) {}

  public:
    size_t getExternalMemorySize() noexcept override;

  public:
    inline const jni::global_ref<JHybridBip39Spec::javaobject>& getJavaPart() const noexcept {
      return _javaPart;
    }

  public:
    // Properties
    

  public:
    // Methods
    WordLists getDefaultWordlist() override;
    void setDefaultWordlist(WordLists value) override;
    std::string generateMnemonic(std::optional<double> wordCount, const std::optional<std::shared_ptr<ArrayBuffer>>& rng, std::optional<WordLists> wordlist) override;
    bool validateMnemonic(const std::string& mnemonic, std::optional<WordLists> wordlist) override;
    std::shared_ptr<ArrayBuffer> mnemonicToSeed(const std::string& mnemonic, const std::optional<std::string>& password) override;
    std::string mnemonicToSeedHex(const std::string& mnemonic, const std::optional<std::string>& password) override;
    std::string mnemonicToEntropy(const std::string& mnemonic, std::optional<WordLists> wordlist) override;
    std::string entropyToMnemonic(const std::shared_ptr<ArrayBuffer>& entropy, std::optional<WordLists> wordlist) override;

  private:
    friend HybridBase;
    using HybridBase::HybridBase;
    jni::global_ref<JHybridBip39Spec::javaobject> _javaPart;
  };

} // namespace margelo::nitro::bip39
