///
/// HybridBip39Spec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `WordLists` to properly resolve imports.
namespace margelo::nitro::rnbip39 { enum class WordLists; }
// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }

#include "WordLists.hpp"
#include <string>
#include <optional>
#include <NitroModules/ArrayBuffer.hpp>

namespace margelo::nitro::rnbip39 {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `Bip39`
   * Inherit this class to create instances of `HybridBip39Spec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridBip39: public HybridBip39Spec {
   * public:
   *   HybridBip39(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridBip39Spec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridBip39Spec(): HybridObject(TAG) { }

      // Destructor
      virtual ~HybridBip39Spec() { }

    public:
      // Properties
      

    public:
      // Methods
      virtual WordLists getDefaultWordlist() = 0;
      virtual void setDefaultWordlist(WordLists value) = 0;
      virtual std::string generateMnemonic(std::optional<double> wordCount, const std::optional<std::shared_ptr<ArrayBuffer>>& rng, std::optional<WordLists> wordlist) = 0;
      virtual bool validateMnemonic(const std::string& mnemonic, std::optional<WordLists> wordlist) = 0;
      virtual std::shared_ptr<ArrayBuffer> mnemonicToSeed(const std::string& mnemonic, const std::optional<std::string>& password) = 0;
      virtual std::string mnemonicToSeedHex(const std::string& mnemonic, const std::optional<std::string>& password) = 0;
      virtual std::string mnemonicToEntropy(const std::string& mnemonic, std::optional<WordLists> wordlist) = 0;
      virtual std::string entropyToMnemonic(const std::shared_ptr<ArrayBuffer>& entropy, std::optional<WordLists> wordlist) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "Bip39";
  };

} // namespace margelo::nitro::rnbip39
