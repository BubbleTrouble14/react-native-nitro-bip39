///
/// WordLists.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2024 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::rnbip39 {

  /**
   * An enum which can be represented as a JavaScript union (WordLists).
   */
  enum class WordLists {
    CHINESE_SIMPLIFIED      SWIFT_NAME(chineseSimplified) = 0,
    CHINESE_TRADITIONAL      SWIFT_NAME(chineseTraditional) = 1,
    CZECH      SWIFT_NAME(czech) = 2,
    ENGLISH      SWIFT_NAME(english) = 3,
    FRENCH      SWIFT_NAME(french) = 4,
    ITALIAN      SWIFT_NAME(italian) = 5,
    JAPANESE      SWIFT_NAME(japanese) = 6,
    KOREAN      SWIFT_NAME(korean) = 7,
    PORTUGUESE      SWIFT_NAME(portuguese) = 8,
    SPANISH      SWIFT_NAME(spanish) = 9,
  } CLOSED_ENUM;

} // namespace margelo::nitro::rnbip39

namespace margelo::nitro {

  using namespace margelo::nitro::rnbip39;

  // C++ WordLists <> JS WordLists (union)
  template <>
  struct JSIConverter<WordLists> {
    static inline WordLists fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("chinese_simplified"): return WordLists::CHINESE_SIMPLIFIED;
        case hashString("chinese_traditional"): return WordLists::CHINESE_TRADITIONAL;
        case hashString("czech"): return WordLists::CZECH;
        case hashString("english"): return WordLists::ENGLISH;
        case hashString("french"): return WordLists::FRENCH;
        case hashString("italian"): return WordLists::ITALIAN;
        case hashString("japanese"): return WordLists::JAPANESE;
        case hashString("korean"): return WordLists::KOREAN;
        case hashString("portuguese"): return WordLists::PORTUGUESE;
        case hashString("spanish"): return WordLists::SPANISH;
        default: [[unlikely]]
          throw std::runtime_error("Cannot convert \"" + unionValue + "\" to enum WordLists - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, WordLists arg) {
      switch (arg) {
        case WordLists::CHINESE_SIMPLIFIED: return JSIConverter<std::string>::toJSI(runtime, "chinese_simplified");
        case WordLists::CHINESE_TRADITIONAL: return JSIConverter<std::string>::toJSI(runtime, "chinese_traditional");
        case WordLists::CZECH: return JSIConverter<std::string>::toJSI(runtime, "czech");
        case WordLists::ENGLISH: return JSIConverter<std::string>::toJSI(runtime, "english");
        case WordLists::FRENCH: return JSIConverter<std::string>::toJSI(runtime, "french");
        case WordLists::ITALIAN: return JSIConverter<std::string>::toJSI(runtime, "italian");
        case WordLists::JAPANESE: return JSIConverter<std::string>::toJSI(runtime, "japanese");
        case WordLists::KOREAN: return JSIConverter<std::string>::toJSI(runtime, "korean");
        case WordLists::PORTUGUESE: return JSIConverter<std::string>::toJSI(runtime, "portuguese");
        case WordLists::SPANISH: return JSIConverter<std::string>::toJSI(runtime, "spanish");
        default: [[unlikely]]
          throw std::runtime_error("Cannot convert WordLists to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("chinese_simplified"):
        case hashString("chinese_traditional"):
        case hashString("czech"):
        case hashString("english"):
        case hashString("french"):
        case hashString("italian"):
        case hashString("japanese"):
        case hashString("korean"):
        case hashString("portuguese"):
        case hashString("spanish"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
